"""
Django settings for lionskins project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path

import sentry_sdk
from corsheaders.defaults import default_headers
from dotenv import load_dotenv
from sentry_sdk.integrations.django import DjangoIntegration

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "false") == "true"

ALLOWED_HOSTS = [os.environ["BACKEND_DOMAIN"]]

if os.environ.get("ENVIRONMENT") != "development":
    SESSION_COOKIE_SECURE = True


# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "corsheaders",
    "django_apscheduler",
    "social_django",
    "rest_framework",
    "django_filters",
    "graphene_django",
    "csgo",
    "lionskins",
    "users",
]

AUTHENTICATION_BACKENDS = ["social_core.backends.steam.SteamOpenId"]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "lionskins.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

WSGI_APPLICATION = "lionskins.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["POSTGRES_DB"],
        "USER": os.environ["POSTGRES_USER"],
        "PASSWORD": os.environ["POSTGRES_PASSWORD"],
        "HOST": os.environ["POSTGRES_HOST"],
        "PORT": os.environ["POSTGRES_PORT"],
    }
}

# Frontend
FRONTEND_DOMAIN = os.environ["FRONTEND_DOMAIN"]

# DRF
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [],
}

# CORS and CSRF
CORS_ALLOWED_ORIGINS = [FRONTEND_DOMAIN]
CORS_ALLOW_HEADERS = list(default_headers) + ["sentry-trace"]
CORS_ALLOW_CREDENTIALS = True
SESSION_COOKIE_SAMESITE = None
CSRF_TRUSTED_ORIGINS = [FRONTEND_DOMAIN]

# Graphene
GRAPHENE = {"SCHEMA": "lionskins.schema.schema"}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = []
AUTH_USER_MODEL = "users.User"


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Contact
CONTACT_FROM = os.environ.get("CONTACT_FROM")
CONTACT_TO = os.environ.get("CONTACT_TO")
SMTP_HOSTNAME = os.environ.get("SMTP_HOSTNAME")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SMTP_LOGIN = os.environ.get("SMTP_LOGIN")
SMTP_PASSWORD = os.environ.get("SMTP_PASSWORD")

# Providers
STEAM_API_KEY = os.environ["STEAM_API_KEY"]
BITSKINS_2FA_KEY = os.environ["BITSKINS_2FA_KEY"]
BITSKINS_API_KEY = os.environ["BITSKINS_API_KEY"]
SKINBARON_API_KEY = os.environ["SKINBARON_API_KEY"]
SKINPORT_CLIENT_ID = os.environ["SKINPORT_CLIENT_ID"]
SKINPORT_CLIENT_SECRET = os.environ["SKINPORT_CLIENT_SECRET"]

# Steam
SOCIAL_AUTH_JSONFIELD_ENABLED = True
SOCIAL_AUTH_STEAM_API_KEY = STEAM_API_KEY
SOCIAL_AUTH_STEAM_EXTRA_DATA = ["player"]
SOCIAL_AUTH_URL_NAMESPACE = "authentication"
SOCIAL_AUTH_PIPELINE = (
    "social_core.pipeline.social_auth.social_details",
    "social_core.pipeline.social_auth.social_uid",
    "social_core.pipeline.social_auth.auth_allowed",
    "social_core.pipeline.social_auth.social_user",
    "users.utils.authentication.get_username",
    "users.utils.authentication.associate_by_steam_id",
    "users.utils.authentication.create_user",
    "social_core.pipeline.social_auth.associate_user",
    "social_core.pipeline.social_auth.load_extra_data",
    "users.utils.authentication.user_details",
)
SOCIAL_AUTH_LOGIN_REDIRECT_URL = FRONTEND_DOMAIN + "/authentication"

# Recaptcha
RECAPTCHA_SECRET = os.environ["RECAPTCHA_SECRET"]

# Sentry
SENTRY_DSN = os.environ.get("SENTRY_DSN")
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        send_default_pii=True,
    )
